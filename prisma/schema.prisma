// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  newName       String?
  role          Role      @default(USER)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Like          Like[]
  Comment       Comment[]
  Diary         Diary[]
  Profile       Profile[]
  AlarmToUser   Alarm[]   @relation(name: "user")
  AlarmFromUser Alarm[]   @relation(name: "fromUser")
  Report        Report[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model Post {
  id           Int       @id @default(autoincrement())
  category     String
  userId       String
  avatar       String?
  post         String    @db.LongText
  file         String?
  commentCount Int       @default(0)
  view         Int       @default(0)
  like         Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Like         Like[]
  Comment      Comment[]
  Alarm        Alarm[]
  Report       Report[]
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    String
  comment   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Search {
  id        Int      @id @default(autoincrement())
  search    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Diary {
  id        Int      @id @default(autoincrement())
  diary     String
  file      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        Int      @id @default(autoincrement())
  introduce String   @default("자기소개")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Alarm {
  id         Int      @id @default(autoincrement())
  category   String
  toUser     String
  fromUserId String
  fromEmail  String
  commentId  Int?
  postId     Int
  user       User     @relation(name: "user", fields: [toUser], references: [id], onDelete: Cascade)
  fromUser   User     @relation(name: "fromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Report {
  id         Int      @id @default(autoincrement())
  report     Int      @default(0)
  targetId   String
  fromUserId String
  postId     Int
  commentId  Int?
  targetUser User     @relation(fields: [targetId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
